##
import torch

##
x = torch.arange(12)
x
# tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])

##
x.shape
# torch.Size([12])

##
x.numel()
# Out[5]: 12

##
X = x.reshape(3, 4)
X
# tensor([[ 0,  1,  2,  3],
#         [ 4,  5,  6,  7],
#         [ 8,  9, 10, 11]])

##
torch.ones((2, 3, 4))
# tensor([[[1., 1., 1., 1.],
#          [1., 1., 1., 1.],
#          [1., 1., 1., 1.]],
#         [[1., 1., 1., 1.],
#          [1., 1., 1., 1.],
#          [1., 1., 1., 1.]]])

##
torch.randn(3, 4)
# tensor([[-0.7976, -1.1784,  0.2495, -1.7858],
#         [-0.8307,  0.5352, -0.0282,  0.0881],
#         [-0.0195,  1.9746, -1.1315,  0.3932]])

##
torch.tensor([[2, 1, 4, 3], [1, 2, 3, 4], [4, 3, 2, 1]])
# tensor([[2, 1, 4, 3],
#         [1, 2, 3, 4],
#         [4, 3, 2, 1]])

##
x = torch.tensor([1.0, 2, 4, 8])
y = torch.tensor([2, 2, 2, 2])
x + y, x - y, x * y, x / y, x ** y  # **运算符是求幂运算
# (tensor([ 3.,  4.,  6., 10.]),
#  tensor([-1.,  0.,  2.,  6.]),
#  tensor([ 2.,  4.,  8., 16.]),
#  tensor([0.5000, 1.0000, 2.0000, 4.0000]),
#  tensor([ 1.,  4., 16., 64.]))

##
torch.exp(x)  # 指数运算
# tensor([2.7183e+00, 7.3891e+00, 5.4598e+01, 2.9810e+03])

##
X = torch.arange(12, dtype = torch.float32).reshape((3, 4))  # arange从0开始到n-1
Y = torch.tensor([[2.0, 1, 4, 3], [1, 2, 3, 4], [4, 3, 2, 1]])
torch.cat((X, Y), dim = 0), torch.cat((X, Y), dim = 1)  # 横向拼接或竖向拼接
# (tensor([[ 0.,  1.,  2.,  3.],
#          [ 4.,  5.,  6.,  7.],
#          [ 8.,  9., 10., 11.],
#          [ 2.,  1.,  4.,  3.],
#          [ 1.,  2.,  3.,  4.],
#          [ 4.,  3.,  2.,  1.]]),
#  tensor([[ 0.,  1.,  2.,  3.,  2.,  1.,  4.,  3.],
#          [ 4.,  5.,  6.,  7.,  1.,  2.,  3.,  4.],
#          [ 8.,  9., 10., 11.,  4.,  3.,  2.,  1.]]))

##
X == Y  # 元素对比
# tensor([[False,  True, False,  True],
#         [False, False, False, False],
#         [False, False, False, False]])

##
X.sum()
# tensor(66.)

##
a = torch.arange(3).reshape((3, 1))
b = torch.arange(2).reshape((1, 2))
a, b, a + b
# (tensor([[0],
#          [1],
#          [2]]),
#  tensor([[0, 1]]),
#  tensor([[0, 1],
#          [1, 2],
#          [2, 3]]))

##
X[-1], X[:, 1:3]
# (tensor([ 8.,  9., 10., 11.]),
#  tensor([[ 1.,  2.],
#          [ 5.,  6.],
#          [ 9., 10.]]))

##
X[1, 2] = 9
X
# tensor([[ 0.,  1.,  2.,  3.],
#         [ 4.,  5.,  9.,  7.],
        # [ 8.,  9., 10., 11.]])

##
X[0:2, :] = 12
X
# tensor([[12., 12., 12., 12.],
#         [12., 12., 12., 12.],
#         [ 8.,  9., 10., 11.]])

##
A = X.numpy()
B = torch.tensor(A)
type(A), type(B)
# (numpy.ndarray, torch.Tensor)


